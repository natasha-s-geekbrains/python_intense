"""
1.

Создайте функцию generate_csv_file(file_name, rows),
которая будет генерировать по три случайны числа в каждой строке,
от 100-1000 строк, и записывать их в CSV-файл. Функция принимает два аргумента:
- file_name (строка) - имя файла, в который будут записаны данные.
- rows(целое число) - количество строк (записей) данных, которые нужно сгенерировать.

generate_csv_file("input_data.csv", 101)

2.

Создайте функцию find_roots(a, b, c),
которая будет находить корни квадратного уравнения вида ax^2 + bx + c = 0.
Функция принимает три аргумента:
a, b, c (целые числа) - коэффициенты квадратного уравнения.

Функция возвращает:
- None, если уравнение не имеет корней (дискриминант отрицателен).
- Одно число, если уравнение имеет один корень (дискриминант равен нулю).
- Два числа (корни), если уравнение имеет два корня (дискриминант положителен).

find_roots("input_data.csv")

3.

Создайте декоратор save_to_json(func), который будет оборачивать функцию find_roots.
Декоратор выполняет следующие действия:
 - Читает данные из CSV-файла, переданного в аргументе функции, исходя из аргумента args[0].
 - Для каждой строки данных вычисляет корни квадратного уравнения с помощью функции find_roots.
 - Сохраняет результаты в формате JSON в файл results.json.
 Каждая запись JSON содержит параметры a, b, c и результаты вычислений.


ИТОГ:
Таким образом, после выполнения функций generate_csv_file и find_roots
в файле results.json будет сохранена информация
о параметрах и результатах вычислений для каждой строки данных из CSV-файла.

with open("results.json", 'r') as f:
    data = json.load(f)

if 100<=len(data)<=1000:
    print(True)
else:
    print(f"Количество строк в файле не находится в диапазоне от 100 до 1000.")

print(len(data)==101)

На выходе:
True
True

Формат JSON файла определён следующим образом:

[
    {"parameters": [a, b, c], "result": result},
    {"parameters": [a, b, c], "result": result},
    ...
]

"""